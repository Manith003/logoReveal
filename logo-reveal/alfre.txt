this is my backend code that works fine

mkdir logo-reveal
cd logo-reveal
npm init -y
reset the server  Invoke-RestMethod -Uri http://localhost:3000/reset -Method Post

npm install express body-parser cors

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const fs = require('fs');

const app = express();
const PORT = 3000;
const TOTAL_STUDENTS = 5000;
const TIMER_DURATION = 48 * 60 * 60 * 1000; // 48 hours in milliseconds

app.use(cors());
app.use(bodyParser.json());

let count = 0;
let startTime = Date.now();

// Load count from a file if it exists
if (fs.existsSync('count.json')) {
    const data = fs.readFileSync('count.json', 'utf-8');
    const parsedData = JSON.parse(data);
    count = parsedData.count;
    startTime = parsedData.startTime || startTime;
} else {
    fs.writeFileSync('count.json', JSON.stringify({ count, startTime }));
}

// Endpoint to get the current count and timer status
app.get('/count', (req, res) => {
    const elapsedTime = Date.now() - startTime;
    const percentage = (count / TOTAL_STUDENTS) * 100;
    const timeLeft = Math.max(TIMER_DURATION - elapsedTime, 0);
    const revealLogo = percentage >= 100 || timeLeft === 0;

    res.json({ count, percentage, timeLeft, revealLogo });
});

// Endpoint to increment the count
app.post('/increment', (req, res) => {
    count++;
    fs.writeFileSync('count.json', JSON.stringify({ count, startTime }));
    res.json({ count, percentage: (count / TOTAL_STUDENTS) * 100 });
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

node server.js

now this is my frontend codde that works fine

1.HTML File for User Page (index.html):
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logo Reveal</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Logo Reveal</h1>
        <p>Click the button to reveal the logo!</p>
        <button id="revealButton">Tap to Reveal</button>
        <div id="progressContainer">
            <div id="progressBar"></div>
        </div>
        <div id="logoContainer" style="display: none;">
            <img src="logo.png" alt="Logo" id="logo">
        </div>
        <p id="timer"></p>
    </div>
    <script src="script.js"></script>
</body>
</html>

2.HTML File for Admin Page (admin.html):
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logo Reveal Admin</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Logo Reveal Admin</h1>
        <p id="status"></p>
        <div id="progressContainer">
            <div id="progressBar"></div>
        </div>
        <div id="logoContainer" style="display: none;">
            <img src="logo.png" alt="Logo" id="logo">
        </div>
        <p id="timer"></p>
    </div>
    <script src="adminScript.js"></script>
</body>
</html>

 CSS File (styles.css):
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}

.container {
    text-align: center;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

#progressContainer {
    width: 100%;
    background-color: #f3f3f3;
    border: 1px solid #ccc;
    margin-top: 20px;
    border-radius: 5px;
    overflow: hidden;
}

#progressBar {
    height: 30px;
    width: 0;
    background-color: #4caf50;
    transition: width 0.5s;
}

#logoContainer {
    margin-top: 20px;
}

#logo {
    max-width: 100%;
}

JavaScript File for User Page (script.js):
document.addEventListener('DOMContentLoaded', () => {
    const revealButton = document.getElementById('revealButton');
    const progressBar = document.getElementById('progressBar');
    const logoContainer = document.getElementById('logoContainer');
    const timerElement = document.getElementById('timer');

    const updateProgress = async () => {
        const response = await fetch('http://localhost:3000/count');
        const data = await response.json();
        const percentage = data.percentage;
        progressBar.style.width = `${percentage}%`;
        const timeLeft = data.timeLeft;

        timerElement.textContent = `Time left: ${Math.floor(timeLeft / 1000 / 60)} minutes`;

        if (data.revealLogo) {
            logoContainer.style.display = 'block';
            revealButton.disabled = true;
        }
    };

    revealButton.addEventListener('click', async () => {
        await fetch('http://localhost:3000/increment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        updateProgress();
    });

    updateProgress();
    setInterval(updateProgress, 1000); // Update progress every second
});
 JavaScript File for Admin Page (adminScript.js):
document.addEventListener('DOMContentLoaded', () => {
    const progressBar = document.getElementById('progressBar');
    const logoContainer = document.getElementById('logoContainer');
    const timerElement = document.getElementById('timer');
    const statusElement = document.getElementById('status');

    const updateProgress = async () => {
        const response = await fetch('http://localhost:3000/count');
        const data = await response.json();
        const percentage = data.percentage;
        progressBar.style.width = `${percentage}%`;
        const timeLeft = data.timeLeft;

        timerElement.textContent = `Time left: ${Math.floor(timeLeft / 1000 / 60)} minutes`;

        if (data.revealLogo) {
            logoContainer.style.display = 'block';
            statusElement.textContent = 'Logo is revealed!';
        } else {
            statusElement.textContent = `Percentage of students clicked: ${percentage.toFixed(2)}%`;
        }
    };

    updateProgress();
    setInterval(updateProgress, 1000); // Update progress every second
});

